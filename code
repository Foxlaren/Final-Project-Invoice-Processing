import pdfplumber
import pandas as pd
import re 
import tkinter as tk
from tkinter import filedialog


class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master, bg="#F4F4F4")
        self.master = master
        self.master.title("PDF Processor")
        self.master.geometry("500x450")
        #to display on the screen
        self.pack(fill="both", expand=True) 
        self.create_widgets()
    
    #Main Page Design
    def create_widgets(self):

        #Define fonts
        title_font = ("Comic Sans MS", 24, "bold")
        label_font = ("white", 14)
        button_font = ("Comic Sans MS", 14, "bold")

        # Define colors
        primary_color = "#FFB6C1"
        secondary_color = "#FFF8DC"
        button_color = "#FFC0CB"
        text_color = "#000000"
        
        #Add label
        self.title_label = tk.Label(self, 
                                    text="PDF Invoice Processor", 
                                    font=title_font, 
                                    bg='purple', 
                                    fg=text_color, 
                                    bd=2, 
                                    relief="groove", 
                                    padx=10, 
                                    pady=10)
        self.title_label.pack(side="top", fill=tk.X)

        # Add select PDF button
        self.select_pdf_button = tk.Button(self, 
                                           text="Select PDF",
                                           font=button_font,
                                           bg=button_color,
                                           fg=text_color,
                                           command=self.select_pdf)
        self.select_pdf_button.pack(side="top", pady=30)

        # Add process PDF button
        self.process_pdf_button = tk.Button(self,
                                            text="Process PDF",
                                            font=button_font,
                                            bg=button_color,
                                            fg=text_color,
                                            state="disabled",
                                            command=self.process_pdf)
        self.process_pdf_button.pack(side="top", pady=10)

        # Add PDF path label
        self.pdf_path_label = tk.Label(self,
                                       text="",
                                       font=label_font,
                                       fg=text_color)
        self.pdf_path_label.pack(side="top", fill=tk.X, padx=10, pady=10)

        # Add about button
        self.about_button = tk.Button(self,
                                      text="About",
                                      font=button_font,
                                      bg="maroon",
                                      fg="#FFFFFF",
                                      command=self.show_about_info)
        self.about_button.pack(side="bottom", pady=(0, 20))

        # Add quit button
        self.quit = tk.Button(self,
                              text="QUIT",
                              font=button_font,
                              bg="brown",
                              fg="#FFFFFF",
                              command=self.master.destroy)
        self.quit.pack(side="bottom", pady=10)
        
    
    #About button functions
    def show_about_info(self):
        about_window = tk.Toplevel(self.master)
        about_window.title("About PDF Processor")
        about_window.geometry("500x500")
        

        heading = 'PDF Invoice Processor v1.0'
        aboutUI = 'This application is designed to extract invoice data from PDF files.\n\nThe UI has two buttons, Select PDF and Process PDF\n\n 1) User must select the PDF to be processed initially.\n\n2) User must select Process PDF button to start the \nactuall processing.\n\n'
        copyWrite = 'Created by 19P14'
        
        #heading label
        about_label = tk.Label(about_window, 
                               text=heading,
                               font=("Comic Sans MS", 20, 'bold'),
                               bg='#e7717d',
                               fg='white')
        about_label.pack(pady=20)
        
        #aboutUI label
        about_label = tk.Label(about_window,
                               text=aboutUI,
                               font=("Comic Sans MS", 12),
                               fg='black',
                               bg='light grey')
        about_label.pack(pady=20)
        
        #copywrite label
        about_label = tk.Label(about_window,
                               text=copyWrite,
                               font=("Comic Sans MS", 12),
                               fg='#00ff00',
                               bg='black')
        about_label.pack(pady=20)
        
        #ok button
        ok_button = tk.Button(about_window,
                              font =("Comic Sans MS", 14, "bold"),
                              text="OK"
                              , bg="brown",
                              fg="#FFFFFF",
                              command=about_window.destroy)
        ok_button.pack(pady=10)

    def select_pdf(self):
        #select the pdf
        self.pdf_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
        #if pdf exists
        if self.pdf_path:
            #Update the path label in UI with pdf path
            self.process_pdf_button.config(state="normal")
            self.pdf_path_label.config(text=self.pdf_path)
        else:
            print('file path doesnt exists')

    def process_pdf(self):
        lines=[]
        pdf = pdfplumber.open(self.pdf_path)
        #go through all the pages
        for page in pdf.pages:
            #go through all lines
            for line in page.extract_text().splitlines():
                #replaces one or more whitespaces with single whitespace
                lines.append(re.sub('\s+', ' ', line.strip()))

        start, end = self.start_end(lines)

        if start == [] or end == []:
            print('keyword not found')
            return

        else:
            print("keyword found")
            start, end = min(start), max(end)
            
            #dictionary that contains the result
            result = {
                'PART':[], 
                'DESCRIPTION':[], 
                'QTY':[], 
                'PRICE':[],
                'TOTAL':[],
            }

            for data in lines[start:end]:
                if 'part' not in data.lower() and 'description' not in data.lower():
                    result['PART'].append(data.split()[0])
                    result['TOTAL'].append(data.split()[-1])
                    result['PRICE'].append(data.split()[-2])
                    result['QTY'].append(data.split()[-3])
                    result['DESCRIPTION'].append(' '.join(data.split()[1:-3]))

            df = pd.DataFrame(result)
            excel_path = self.pdf_path.replace(".pdf", ".xlsx")
            df.to_excel(excel_path, index=False)

            print("Result saved in", excel_path)

    def start_end(self, data_list):
        start, end = [], []
        for ind, line in enumerate(data_list):
            if 'part' in line.lower() and 'description' in line.lower():   
                start.append(ind)
            if 'subtotal' in line.lower():
                end.append(ind)
        return start, end


root = tk.Tk()
app = Application(master=root)
app.mainloop()
